'use strict';

module.exports = function(name)
{
        // not using "name in document" because that might vary between DOM implementations,
        // which is confusing
        switch (name)
        {

case 'ATTRIBUTE_NODE':
case 'CDATA_SECTION_NODE':
case 'COMMENT_NODE':
case 'DOCUMENT_FRAGMENT_NODE':
case 'DOCUMENT_NODE':
case 'DOCUMENT_POSITION_CONTAINED_BY':
case 'DOCUMENT_POSITION_CONTAINS':
case 'DOCUMENT_POSITION_DISCONNECTED':
case 'DOCUMENT_POSITION_FOLLOWING':
case 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC':
case 'DOCUMENT_POSITION_PRECEDING':
case 'DOCUMENT_TYPE_NODE':
case 'ELEMENT_NODE':
case 'ENTITY_NODE':
case 'ENTITY_REFERENCE_NODE':
case 'NOTATION_NODE':
case 'PROCESSING_INSTRUCTION_NODE':
case 'TEXT_NODE':
case 'URL':
case '__defineGetter__':
case '__defineSetter__':
case '__lookupGetter__':
case '__lookupSetter__':
case '__proto__':
case 'acceptCharset':
case 'accessKey':
case 'accessKeyLabel':
case 'action':
case 'activeElement':
case 'addEventListener':
case 'adoptNode':
case 'alinkColor':
case 'all':
case 'anchors':
case 'animate':
case 'appendChild':
case 'applets':
case 'attributes':
case 'autocomplete':
case 'baseURI':
case 'bgColor':
case 'blur':
case 'body':
case 'captureEvents':
case 'caretPositionFromPoint':
case 'caretRangeFromPoint':
case 'characterSet':
case 'charset':
case 'checkValidity':
case 'childElementCount':
case 'childNodes':
case 'children':
case 'classList':
case 'className':
case 'clear':
case 'click':
case 'clientHeight':
case 'clientLeft':
case 'clientTop':
case 'clientWidth':
case 'cloneNode':
case 'close':
case 'closest':
case 'compareDocumentPosition':
case 'compatMode':
case 'constructor':
case 'contains':
case 'contentEditable':
case 'contentType':
case 'contextMenu':
case 'cookie':
case 'createAttribute':
case 'createAttributeNS':
case 'createCDATASection':
case 'createComment':
case 'createDocumentFragment':
case 'createElement':
case 'createElementNS':
case 'createEvent':
case 'createExpression':
case 'createNSResolver':
case 'createNodeIterator':
case 'createProcessingInstruction':
case 'createRange':
case 'createShadowRoot':
case 'createTextNode':
case 'createTreeWalker':
case 'currentScript':
case 'dataset':
case 'defaultCharset':
case 'defaultView':
case 'designMode':
case 'dir':
case 'dispatchEvent':
case 'doctype':
case 'documentElement':
case 'documentURI':
case 'domain':
case 'domConfig':
case 'draggable':
case 'elementFromPoint':
case 'elements':
case 'embeds':
case 'enableStyleSheetsForSet':
case 'encoding':
case 'enctype':
case 'evaluate':
case 'execCommand':
case 'exitPointerLock':
case 'fgColor':
case 'firstChild':
case 'firstElementChild':
case 'focus':
case 'fonts':
case 'forms':
case 'getAttribute':
case 'getAttributeNS':
case 'getAttributeNode':
case 'getAttributeNodeNS':
case 'getBoundingClientRect':
case 'getCSSCanvasContext':
case 'getClientRects':
case 'getDestinationInsertionPoints':
case 'getElementById':
case 'getElementsByClassName':
case 'getElementsByName':
case 'getElementsByTagName':
case 'getElementsByTagNameNS':
case 'getItems':
case 'getOverrideStyle':
case 'getSelection':
case 'getUserData':
case 'hasAttribute':
case 'hasAttributeNS':
case 'hasAttributes':
case 'hasChildNodes':
case 'hasFocus':
case 'hasOwnProperty':
case 'head':
case 'hidden':
case 'id':
case 'images':
case 'implementation':
case 'importNode':
case 'innerHTML':
case 'innerText':
case 'inputEncoding':
case 'insertAdjacentElement':
case 'insertAdjacentHTML':
case 'insertAdjacentText':
case 'insertBefore':
case 'isContentEditable':
case 'isDefaultNamespace':
case 'isEqualNode':
case 'isPrototypeOf':
case 'isSameNode':
case 'itemId':
case 'itemProp':
case 'itemRef':
case 'itemScope':
case 'itemType':
case 'itemValue':
case 'lang':
case 'lastChild':
case 'lastElementChild':
case 'lastModified':
case 'lastStyleSheetSet':
case 'length':
case 'linkColor':
case 'links':
case 'localName':
case 'location':
case 'lookupNamespaceURI':
case 'lookupPrefix':
case 'matches':
case 'method':
case 'mozCancelFullScreen':
case 'mozExitPointerLock':
case 'mozFullScreen':
case 'mozFullScreenElement':
case 'mozFullScreenEnabled':
case 'mozHidden':
case 'mozMatchesSelector':
case 'mozPointerLockElement':
case 'mozRequestFullScreen':
case 'mozRequestPointerLock':
case 'mozSetImageElement':
case 'mozVisibilityState':
case 'name':
case 'namespaceURI':
case 'nextElementSibling':
case 'nextSibling':
case 'noValidate':
case 'nodeName':
case 'nodeType':
case 'nodeValue':
case 'normalize':
case 'offsetHeight':
case 'offsetLeft':
case 'offsetParent':
case 'offsetTop':
case 'offsetWidth':
case 'onabort':
case 'onafterscriptexecute':
case 'onautocomplete':
case 'onautocompleteerror':
case 'onbeforecopy':
case 'onbeforecut':
case 'onbeforepaste':
case 'onbeforescriptexecute':
case 'onblur':
case 'oncancel':
case 'oncanplay':
case 'oncanplaythrough':
case 'onchange':
case 'onclick':
case 'onclose':
case 'oncontextmenu':
case 'oncopy':
case 'oncuechange':
case 'oncut':
case 'ondblclick':
case 'ondrag':
case 'ondragend':
case 'ondragenter':
case 'ondragleave':
case 'ondragover':
case 'ondragstart':
case 'ondrop':
case 'ondurationchange':
case 'onemptied':
case 'onended':
case 'onerror':
case 'onfocus':
case 'oninput':
case 'oninvalid':
case 'onkeydown':
case 'onkeypress':
case 'onkeyup':
case 'onload':
case 'onloadeddata':
case 'onloadedmetadata':
case 'onloadstart':
case 'onmousedown':
case 'onmouseenter':
case 'onmouseleave':
case 'onmousemove':
case 'onmouseout':
case 'onmouseover':
case 'onmouseup':
case 'onmousewheel':
case 'onmozfullscreenchange':
case 'onmozfullscreenerror':
case 'onmozpointerlockchange':
case 'onmozpointerlockerror':
case 'onpaste':
case 'onpause':
case 'onplay':
case 'onplaying':
case 'onpointerlockchange':
case 'onpointerlockerror':
case 'onprogress':
case 'onratechange':
case 'onreadystatechange':
case 'onreset':
case 'onresize':
case 'onscroll':
case 'onsearch':
case 'onseeked':
case 'onseeking':
case 'onselect':
case 'onselectionchange':
case 'onselectstart':
case 'onshow':
case 'onstalled':
case 'onsubmit':
case 'onsuspend':
case 'ontimeupdate':
case 'ontoggle':
case 'onvolumechange':
case 'onwaiting':
case 'onwebkitfullscreenchange':
case 'onwebkitfullscreenerror':
case 'onwheel':
case 'open':
case 'origin':
case 'outerHTML':
case 'outerText':
case 'ownerDocument':
case 'parentElement':
case 'parentNode':
case 'plugins':
case 'pointerLockElement':
case 'preferredStyleSheetSet':
case 'preferredStylesheetSet':
case 'prefix':
case 'previousElementSibling':
case 'previousSibling':
case 'properties':
case 'propertyIsEnumerable':
case 'queryCommandEnabled':
case 'queryCommandIndeterm':
case 'queryCommandState':
case 'queryCommandSupported':
case 'queryCommandValue':
case 'querySelector':
case 'querySelectorAll':
case 'raise':
case 'readonly':
case 'readyState':
case 'referrer':
case 'registerElement':
case 'releaseCapture':
case 'releaseEvents':
case 'remove':
case 'removeAttribute':
case 'removeAttributeNS':
case 'removeAttributeNode':
case 'removeChild':
case 'removeEventListener':
case 'replaceChild':
case 'reportValidity':
case 'requestAutocomplete':
case 'requestPointerLock':
case 'reset':
case 'rootElement':
case 'scripts':
case 'scroll':
case 'scrollBy':
case 'scrollHeight':
case 'scrollIntoView':
case 'scrollIntoViewIfNeeded':
case 'scrollLeft':
case 'scrollLeftMax':
case 'scrollTo':
case 'scrollTop':
case 'scrollTopMax':
case 'scrollWidth':
case 'selectedStyleSheetSet':
case 'selectedStylesheetSet':
case 'setAttribute':
case 'setAttributeNS':
case 'setAttributeNode':
case 'setAttributeNodeNS':
case 'setCapture':
case 'setUserData':
case 'shadowRoot':
case 'sourceIndex':
case 'spellcheck':
case 'style':
case 'styleSheetSets':
case 'styleSheets':
case 'submit':
case 'tabIndex':
case 'tagName':
case 'target':
case 'textContent':
case 'title':
case 'toLocaleString':
case 'toSource':
case 'toString':
case 'translate':
case 'unwatch':
case 'valueOf':
case 'visibilityState':
case 'vlinkColor':
case 'watch':
case 'webkitCancelFullScreen':
case 'webkitCurrentFullScreenElement':
case 'webkitExitFullscreen':
case 'webkitFullscreenElement':
case 'webkitFullscreenEnabled':
case 'webkitHidden':
case 'webkitIsFullScreen':
case 'webkitMatchesSelector':
case 'webkitRequestFullScreen':
case 'webkitRequestFullscreen':
case 'webkitVisibilityState':
case 'webkitdropzone':
case 'write':
case 'writeln':
case 'xmlEncoding':
case 'xmlStandalone':
case 'xmlVersion':
                return true;
        }

        return false;
};